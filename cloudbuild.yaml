steps:
  # Step 1: Build Docker image with appropriate profile (dev/prod)
  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'build',
        '--build-arg', 'PROFILE=$_ENV',
        '-t', '$_GCR_HOSTNAME/$PROJECT_ID/user-mgmt-app/user-mgmt-app-$_ENV:$COMMIT_SHA',
        '.'
      ]

  # Step 2: Push image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'push',
        '$_GCR_HOSTNAME/$PROJECT_ID/user-mgmt-app/user-mgmt-app-$_ENV:$COMMIT_SHA'
      ]

  # Step 3: Deploy image to Cloud Run using environment-specific values
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    args:
      [
        'gcloud', 'run', 'deploy', 'user-mgmt-app-$_ENV',
        '--image', '$_GCR_HOSTNAME/$PROJECT_ID/user-mgmt-app/user-mgmt-app-$_ENV:$COMMIT_SHA',
        '--region', 'us-central1',
        '--platform', 'managed',
        '--allow-unauthenticated',
        '--service-account', 'cloud-build-deployer@$PROJECT_ID.iam.gserviceaccount.com',
        '--set-env-vars',
        'SPRING_PROFILES_ACTIVE=$_ENV,DB_NAME=userdb,DB_USER=springuser,INSTANCE_CONNECTION_NAME=$PROJECT_ID:us-central1:$_INSTANCE_NAME,SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT=60000',
        '--set-secrets',
        'DB_PASSWORD=$_DB_SECRET:latest',
        '--add-cloudsql-instances', '$PROJECT_ID:us-central1:$_INSTANCE_NAME',
        '--memory', '512Mi',
        '--port', '8080',
        '--timeout', '900s'
      ]

options:
  logging: CLOUD_LOGGING_ONLY

# Default substitutions (can be overridden in the build trigger)
substitutions:
  _ENV: 'dev'                      # or 'prod'
  _GCR_HOSTNAME: 'us-central1-docker.pkg.dev'
  _INSTANCE_NAME: 'userdb-dev'     # or 'userdb-prod'
  _DB_SECRET: 'db-dev-password'    # or 'db-prod-password'
